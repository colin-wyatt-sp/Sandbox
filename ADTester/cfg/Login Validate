int port = isSsl ? 636 : 389;
string ldapBaseAddr = !string.IsNullOrWhiteSpace(specificServer) ? specificServer : domain;
string domainDN = domain;
domainDN = Regex.Replace(
    domainDN,
    @"\.",
    ",dc="
);
domainDN =
String.Format(
    "dc={0}",
    domainDN
);

string baseDN = null;
//baseDN = (string)wpc.Configuration.Configuration[LocalConstants.CONFIG.XML_BASEDN_NAME];
// attaching the domain DN to the baseDN
if (string.IsNullOrEmpty(baseDN))
{
    baseDN = domainDN;
}
else
{
    baseDN =
        string.Format(
            "{0},{1}",
            baseDN,
            domainDN
        );
}

// setting a connection details.
DirectoryEntry de = new DirectoryEntry();
de.Username = username;
de.Password = password;

// building the connection string.
// here we don't use the base dn because the 
// connection user might not be there
StringBuilder path = new StringBuilder();
path.AppendFormat(
    "LDAP://{0}:{1}/{2}",
    string.IsNullOrEmpty(specificServer) ? domain : specificServer,
    port.ToString(),
    domainDN
);
de.Path = path.ToString();

// setting the authentication type.
de.AuthenticationType = AuthenticationTypes.Secure;

// adding to the base auth type
if (ssl) {
    de.AuthenticationType = de.AuthenticationType |
        AuthenticationTypes.SecureSocketsLayer;
}

// adding to the base auth type
if (!string.IsNullOrEmpty(specificServer)) {
    de.AuthenticationType = de.AuthenticationType |
        AuthenticationTypes.ServerBind;
}

searchedObject = de.NativeObject;

DirectorySearcher ds = new DirectorySearcher(de);
ds.Filter = "(" + "SAMAccountName" + "=" + uName + ")";
ds.PropertiesToLoad.Add("cn");

SearchResult sr = ds.FindOne();

if (sr == null) {
    throw new FaultException("Unknown user or bad password");
}

string ldapPath = string.Format("LDAP://{0}:{1}/RootDSE", ldapBaseAddr, port);
sb.AppendLine(ldapPath);
AuthenticationTypes authType = AuthenticationTypes.Secure;
if (isSsl)
	authType |= AuthenticationTypes.SecureSocketsLayer;
if (!string.IsNullOrWhiteSpace(specificServer))
	authType |= AuthenticationTypes.ServerBind;

DirectoryEntry directoryEntry = new DirectoryEntry(ldapPath, username, password, authType);

using (directoryEntry)
{
	foreach (var prop in directoryEntry.Properties)
	{
		if (prop is PropertyValueCollection) {
			
			var propValCollection = prop as PropertyValueCollection;
			sb.AppendLine(propValCollection.PropertyName + ":");
			foreach (var element in propValCollection) 
			{
				sb.AppendLine("   " + element +" ");
			}
		}
		else {
			sb.AppendLine("prop type: " + prop.GetType().Name);
		}
	}
}